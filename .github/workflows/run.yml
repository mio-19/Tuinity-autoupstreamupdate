name: run

on:
  push:
    branches: [ scripts ]
  schedule:
    - cron:  '*/30 * * * *'

jobs:
  build:
    strategy:
      matrix:
        branch: [master, ver/1.15.2]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/setup-java@v1
      with:
        java-version: 11
    - uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-
    - name: Run ${{ matrix.branch }}
      env:
        GIT_ID_RSA: ${{ secrets.GIT_ID_RSA }}
        REPO: git@github.com:tsao-chi/Tuinity-autoupstreamupdate.git
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H -t rsa github.com > ~/.ssh/known_hosts
        echo "$GIT_ID_RSA" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        git config --global user.email tsao-chi@the-lingo.org
        git config --global user.name 'ㄗㄠˋ ㄑㄧˊ'
        git clone -b ${{ matrix.branch }} https://github.com/Spottedleaf/Tuinity.git ~/Tuinity
        cd ~/Tuinity
        BASE_COMMIT=$(git rev-parse HEAD)
        ./tuinity patch
        PAPER_BASE_COMMIT=$(cd Paper && git rev-parse HEAD)
        if ./tuinity upstream up && ./tuinity patch && ./tuinity rebuild && ./tuinity build && [ "$(cd Paper && git rev-parse HEAD)" != "$PAPER_BASE_COMMIT" ] ;then
          git add .
          ./scripts/upstreamCommit.sh
          PAPER_COMMIT=$(cd Paper && git rev-parse HEAD)
          if git clone --depth=50 -b ${{ matrix.branch }} "$REPO" REPO && [ "$(cd REPO && git rev-parse HEAD^)" = "$BASE_COMMIT" ] && (cd REPO && git submodule update --init --recursive) && [ "$(cd REPO/Paper && git rev-parse HEAD)" = "$PAPER_COMMIT" ] ;then
            :
          else
            git push --force "$REPO"
          fi
        else
          if git clone --depth=50 -b ${{ matrix.branch }} "$REPO" REPO && (cd REPO && git merge-base --is-ancestor "$BASE_COMMIT" HEAD) && (cd REPO && git submodule update --init --recursive) && (cd REPO/Paper && git merge-base --is-ancestor "$PAPER_BASE_COMMIT" HEAD) ;then
            :
          else
            git push --force "$REPO"
          fi
        fi
